#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'
require_relative 'lib/start'

# Router:
class HipPublisher
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "start"
        startmessage()
      elsif options[:command] == "addSong" #pass
        add_song()
      elsif options[:command] == "addWriter" #pass
        add_writer()
      elsif options[:command] == "viewAll" #pass
        view_all_songs()
      elsif options[:command] == "viewSong" #pass
        search_term = ask("What song do you want to view?")
        search_songs_for(search_term)
      elsif options[:command] == "viewSongsBy"
        view_songs_by()
      elsif options[:command] == "missing" #pass
        missing_song_data()
      elsif options[:command] == "editSong" #pass
        edit_song()
      elsif options[:command] == "deleteSong" #pass
        delete_song()
      else
      puts "Command not implemented"
    end
  end

  def missing_song_data()
    puts "************************************************"
    puts "Songs Missing Creation Date"
    puts "************************************************"
    puts Song.missingdate
    puts "************************************************"
    puts "Songs Missing Lyrics"
    puts "************************************************"
    puts Song.missinglyrics
    puts "************************************************"
    puts "Songs Missing Worktape"
    puts "************************************************"
    puts Song.missingworktape
  end

  def delete_song()
    puts view_all_songs
    id = ask("Type a song ID to delete a song")
    song = Song.find(id)
    songname = song.title
    answer = ask("Are you sure you want to delete '#{songname}' (y or n)").downcase
    if answer == 'y'
      Song.delete(id)
      puts "'#{songname}' has been deleted"
    else
      puts "'#{songname}' is safe"
    end
  end

  def view_all_songs()
    puts "All Songs:"
    puts Song.all
  end

  def view_songs_by()
    puts "Pick a Songwriter"
    puts view_all_songwriters
    writerID = ask("Which songwriter catalog do you want to view?")
    puts Song.find(writerID)
  end

  def search_songs_for(search_term)
    puts "You asked for the song: #{search_term}"
    puts Song.searchSong(search_term)
  end

  def add_song
    error_messages = ArgumentParser.validateSong(options)
    if error_messages.empty?
      song = Song.new(options)
      song.save
      puts "Please add songwriters names seperated by ,"
      view_all_songwriters
      songwriters = $stdin.gets
      songwriters = songwriters.split(", ")
      songwriters.map! do |writer|
        songwriter = Songwriter.find_or_create(writer)
      end
      database = Environment.database_connection
      songwriters.each do |writer|
        database.execute("insert into songsongwriters(song_id, songwriter_id) values(#{song.id}, #{writer.id})")
      end
      puts "The song '#{song.title}' was added to the catalog"
    else
      puts error_messages.join(" ")
    end
  end

  def add_writer
    error_messages = ArgumentParser.validateSongwriter(options)
    if error_messages.empty?
      songwriter = Songwriter.new(options[:name])
      songwriter.saveSongwriter
      puts "Songwriter #{songwriter.name} was created."
    else
      puts error_messages.join(" ")
    end
  end

   def view_all_songwriters()
    puts "All Songwriters by ID:"
    puts Songwriter.all
  end

  def edit_song
    if song = Song.find(options[:id])
        song.update(options)
        puts "Song #{song.id} is now titled #{song.title}"
    else
        puts "Song #{options[:id]} couldn't be updated."
    end
  end


 def startmessage

      title = <<EOS
   _   _ _       ____        _     _ _     _
  | | | (_)_ __ |  _ \\ _   _| |__ | (_)___| |__   ___ _ __
  | |_| | | '_ \\| |_) | | | | '_ \\| | / __| '_ \\ / _ \\ '__|
  |  _  | | |_) |  __/| |_| | |_) | | \\__ \\ | | |  __/ |
  |_| |_|_| .__/|_|    \\__,_|_.__/|_|_|___/_| |_|\\___|_|
          |_|

  -Keeping better track of what your songwriters submit-

  *Please use the following commands to manage your catalog

  > addSong --title 'Rainy Day' --date '12-13-2013' --haslyrics 'yes' --hasworktape 'no'
  > addWriter --name 'Abby Boykin'
  > viewAll
  > viewSong  --title 'Best Is Yest To Come'
  > viewSongsBy --name 'Abby Graham'"
  > missing --name 'Abby Graham'"
  > editSong --title 'Rainy Day' --date '12-20-2013' --haslyrics 'yes' --hasworktape 'yes'"
  > deleteSong --title 'Rainy Day' --date '12-20-2013' --haslyrics 'yes' --hasworktape 'yes'"


EOS
    puts title
  end
end


hippublisher = HipPublisher.new()
hippublisher.main()

